# -*- coding: utf-8 -*-
"""UAS DATA ENGINEER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zlG7VrWJ4AZ6akPSbTMpcj-mwOyeCrw6

# **Extract (Pengambilan Data)**
"""

import kagglehub
import pandas as pd

path_tanaman = kagglehub.dataset_download("datasetengineer/smart-farming-data-2024-sf24")
path_cuaca = kagglehub.dataset_download("lionelbottan/weatheraus")

print("Path to dataset files:", path_tanaman)
print("Path to dataset files:", path_cuaca)

!pip install pycaret

"""# **Transform (Pembersihan & Transformasi)**"""

df_tanaman = pd.read_csv("/kaggle/input/smart-farming-data-2024-sf24/Crop_recommendationV2.csv")
df_cuaca = pd.read_csv("/kaggle/input/weatheraus/weatherAUS.csv")

# Pengecakan apakah ada nilai yang null pada data tanaman

if df_tanaman.isnull().values.any():
    print("Ada nilai yang null.")
else:
    print("Tidak ada nilai yang null.")

df_tanaman.isnull().sum()

#Pengecekan apakah ada duplikasi pada data tanaman

if df_tanaman.duplicated().any():
    print("Ada duplikasi data.")
else:
    print("Tidak ada duplikasi data.")

df_tanaman.duplicated()

# Pengecakan apakah ada nilai yang null pada data cuaca

if df_cuaca.isnull().values.any():
    print("Ada nilai yang null.")
else:
    print("Tidak ada nilai yang null.")

df_cuaca.isnull().sum()

#Penghapusan nilai yang null pada data cuaca

df_cuaca = df_cuaca.dropna()

if df_cuaca.isnull().values.any():
    print("Ada nilai yang null.")
else:
    print("Tidak ada nilai yang null.")

df_cuaca.isnull().sum()

#Pengecekan apakah ada duplikasi data cuaca

if df_cuaca.duplicated().any():
    print("Ada duplikasi data.")
else:
    print("Tidak ada duplikasi data.")

df_cuaca.duplicated()

"""# **Pengelompokan Data**"""

df_tanaman = df_tanaman[['label', 'temperature', 'rainfall']]
df_tanaman.rename(columns={'label': 'tanaman', 'temperature': 'Temperatur', 'rainfall': 'Rainfall'}, inplace=True) #Mengubah nama fitur
df_tanaman.head(10)

df_cuaca = df_cuaca[['Location', 'MinTemp', 'MaxTemp', 'Rainfall']]
df_cuaca.reset_index(drop=True, inplace=True) #data sebelumnya dimulai dari index 6049, mengulang index dari awal
df_cuaca.head()

"""# **Clustering**"""

df_cuaca['Temperatur'] = df_cuaca[['MinTemp', 'MaxTemp']].median(axis=1)

# Ambil hanya kolom yang diinginkan
df_hasil = df_cuaca[['Location', 'Temperatur', 'Rainfall']]

df_hasil.head(10)

from pycaret.clustering import *

# Setup PyCaret clustering environment
clust_setup = setup(data=df_hasil,
                    session_id=123,
                    normalize=True,
                    )

# Membuat model K-Means
kmeans = create_model('kmeans', num_clusters=3)  # Ganti angka 3 dengan jumlah cluster yang diinginkan

# Menetapkan hasil clustering ke dataframe
df_hasil_with_cluster = assign_model(kmeans)

# Menampilkan 10 baris pertama dengan cluster assignment
print(df_hasil_with_cluster.head(20))

# Visualisasi cluster
plot_model(kmeans, plot='cluster')  # Visualisasi 2D cluster
plot_model(kmeans, plot='elbow')   # Elbow method untuk menentukan jumlah cluster optimal

"""# **Rekomendasi Tanaman Berdasarkan Curah Hujan dan Suhu di Australia**"""

from sklearn.neighbors import NearestNeighbors
import numpy as np

# Training KNN pada data lokasi
X_lokasi = df_hasil_with_cluster[['Temperatur', 'Rainfall']]
knn = NearestNeighbors(n_neighbors=1, metric='euclidean')
knn.fit(X_lokasi)

# Cari lokasi paling dekat untuk tiap tanaman
X_tanaman = df_tanaman[['Temperatur', 'Rainfall']]
distances, indices = knn.kneighbors(X_tanaman)

# Tambahkan kolom lokasi cocok ke DataFrame tanaman
df_tanaman['Cocok_Di_Lokasi'] = df_hasil_with_cluster.loc[indices.flatten(), 'Location'].values

df_tanaman.head(5000)

# @title Serving analisis
# Langkah 1: Import Library
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Langkah 2: Membaca Data
df = df_cuaca

# Tampilkan kolom untuk pengecekan
print("Kolom:", df.columns)

# Langkah 3: Tentukan nama kolom yang sesuai
lokasi_col = 'Location'
suhu_min_col = 'MinTemp'
suhu_max_col = 'MaxTemp'
hujan_col = 'Rainfall'

# Langkah 4: Analisis Data
suhu_max = df.groupby(lokasi_col)[suhu_max_col].max().reset_index().rename(columns={suhu_max_col: 'Suhu_Tertinggi'})
suhu_min = df.groupby(lokasi_col)[suhu_min_col].min().reset_index().rename(columns={suhu_min_col: 'Suhu_Terendah'})
hujan_max = df.groupby(lokasi_col)[hujan_col].max().reset_index().rename(columns={hujan_col: 'Curah_Hujan_Tertinggi'})
hujan_min = df.groupby(lokasi_col)[hujan_col].min().reset_index().rename(columns={hujan_col: 'Curah_Hujan_Terendah'})

# Gabungkan data
hasil = suhu_max.merge(suhu_min, on=lokasi_col)\
                .merge(hujan_max, on=lokasi_col)\
                .merge(hujan_min, on=lokasi_col)

# Tampilkan hasil analisis
print("\nHasil Analisis:")
print(hasil)

# Simpan ke file
hasil.to_csv('hasil_analisis_suhu_dan_hujan.csv', index=False)

# Langkah 5: Visualisasi
plt.figure(figsize=(18, 10))
sns.set(style="whitegrid")

# Subplot 1: Suhu
plt.subplot(2, 1, 1)
df_plot1 = hasil.sort_values('Suhu_Tertinggi', ascending=False)
x = df_plot1[lokasi_col]
plt.bar(x, df_plot1['Suhu_Tertinggi'], color='tomato', label='Suhu Tertinggi')
plt.bar(x, df_plot1['Suhu_Terendah'], color='deepskyblue', label='Suhu Terendah', alpha=0.7)
plt.title('Suhu Tertinggi dan Terendah per Lokasi')
plt.xlabel('Lokasi')
plt.ylabel('Suhu (Â°C)')
plt.xticks(rotation=45)
plt.legend()

# Subplot 2: Curah Hujan
plt.subplot(2, 1, 2)
df_plot2 = hasil.sort_values('Curah_Hujan_Tertinggi', ascending=False)
x2 = df_plot2[lokasi_col]
plt.bar(x2, df_plot2['Curah_Hujan_Tertinggi'], color='mediumseagreen', label='Curah Hujan Tertinggi')
plt.bar(x2, df_plot2['Curah_Hujan_Terendah'], color='skyblue', label='Curah Hujan Terendah', alpha=0.7)
plt.title('Curah Hujan Tertinggi dan Terendah per Lokasi')
plt.xlabel('Lokasi')
plt.ylabel('Curah Hujan (mm)')
plt.xticks(rotation=45)
plt.legend()

plt.tight_layout()
plt.show()

# Langkah 1: Import library
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Langkah 2: Baca dataset
df = df_tanaman

# Langkah 3: Analisis rata-rata kebutuhan pupuk NPK per tanaman
# Menggunakan nama kolom 'label' yang ada sebelum renaming
hasil_npk = df.groupby('label')[['N', 'P', 'K']].mean().reset_index()
# Mengganti nama kolom 'label' menjadi 'Tanaman' pada hasil analisis
hasil_npk = hasil_npk.rename(columns={'label': 'Tanaman'})

# Tampilkan hasil
print("Rata-rata kebutuhan pupuk NPK per tanaman:")
print(hasil_npk)

# Simpan ke file CSV
hasil_npk.to_csv('analisis_npk_per_tanaman.csv', index=False)

# Langkah 4: Visualisasi
plt.figure(figsize=(12, 6))
hasil_npk_plot = hasil_npk.set_index('Tanaman')
hasil_npk_plot.plot(kind='bar', figsize=(12, 6), colormap='Accent')
plt.title('Rata-rata Kebutuhan Pupuk NPK per Tanaman')
plt.ylabel('Jumlah Pupuk (kg/ha)')
plt.xlabel('Tanaman')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Tanaman dengan kebutuhan Nitrogen (N) tertinggi
tanaman_n_tertinggi = hasil_npk.loc[hasil_npk['N'].idxmax()]
print("\nTanaman dengan kebutuhan Nitrogen (N) tertinggi:")
print(tanaman_n_tertinggi)

# Fungsi untuk mengkategorikan
def kategori_kebutuhan(nilai, kolom):
    q1 = hasil_npk[kolom].quantile(0.33)
    q2 = hasil_npk[kolom].quantile(0.66)
    if nilai <= q1:
        return 'Rendah'
    elif nilai <= q2:
        return 'Sedang'
    else:
        return 'Tinggi'

# Tambahkan kolom kategori
hasil_npk['Kategori_N'] = hasil_npk['N'].apply(lambda x: kategori_kebutuhan(x, 'N'))
hasil_npk['Kategori_P'] = hasil_npk['P'].apply(lambda x: kategori_kebutuhan(x, 'P'))
hasil_npk['Kategori_K'] = hasil_npk['K'].apply(lambda x: kategori_kebutuhan(x, 'K'))

print("\nKategori kebutuhan NPK per tanaman:")
print(hasil_npk[['Tanaman', 'Kategori_N', 'Kategori_P', 'Kategori_K']])

# Total NPK per tanaman
hasil_npk['Total_NPK'] = hasil_npk[['N', 'P', 'K']].sum(axis=1)

# Pie chart
plt.figure(figsize=(8, 8))
plt.pie(hasil_npk['Total_NPK'], labels=hasil_npk['Tanaman'], autopct='%1.1f%%', startangle=140)
plt.title('Proporsi Total Kebutuhan Pupuk NPK per Tanaman')
plt.axis('equal')
plt.show()

# Stacked bar
hasil_npk_plot = hasil_npk.set_index('Tanaman')[['N', 'P', 'K']]
hasil_npk_plot.plot(kind='bar', stacked=True, figsize=(12, 6), colormap='Paired')
plt.title('Kebutuhan Pupuk NPK per Tanaman (Stacked Bar)')
plt.ylabel('Jumlah Pupuk (kg/ha)')
plt.xlabel('Tanaman')
plt.xticks(rotation=45)
plt.legend(title='Unsur')
plt.tight_layout()
plt.grid(axis='y')
plt.show()